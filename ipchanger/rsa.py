CIPSOFT_RSA = b"BC27F992A96B8E2A43F4DFBE1CEF8FD51CF43D2803EE34FBBD8634D8B4FA32F7D9D9E159978DD29156D62F4153E9C5914263FC4986797E12245C1A6C4531EFE48A6F7C2EFFFFF18F2C9E1C504031F3E4A2C788EE96618FFFCEC2C3E5BFAFAF743B3FC7A872EE60A52C29AA688BDAF8692305312882F1F66EE9D8AEB7F84B1949"
OPENTIBIA_RSA = b"9B646903B45B07AC956568D87353BD7165139DD7940703B03E6DD079399661B4A837AA60561D7CCB9452FA0080594909882AB5BCA58A1A1B35F8B1059B72B1212611C6152AD3DBB3CFBEE7ADC142A75D3D75971509C321C5C24A5BD51FD460F01B4E15BEB0DE1930528A5D3F15C1E3CBF5C401D6777E10ACAAB33DBE8D5B7FF5"
# re_rsa = re.compile(b"(?<=\0)[0-9A-F]{256}(?=\0)")  # search for any RSA key


def replace_rsa(data: bytes, replacement: bytes = OPENTIBIA_RSA) -> bytes:
    """Searches and replaces RSA key with Open Tibia default key."""
    assert len(replacement) == 256, "Replacement RSA key is not 256 bytes long."

    start = data.find(b"\x00" + CIPSOFT_RSA + b"\x00") + 1
    assert start, "Could not find RSA key to replace."

    end = start + len(CIPSOFT_RSA)
    return b"".join((data[:start], OPENTIBIA_RSA, data[end:]))
